/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AMOInterface extends utils.Interface {
  contractName: "AMO";
  functions: {
    "FRAX_ILK_ID()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addLiquidityToAMM(bytes6,uint128,uint128,uint256,uint256)": FunctionFragment;
    "addSeries(bytes6,address,address)": FunctionFragment;
    "burnFyFrax(bytes6,uint128)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "currentAMOmintedFRAX()": FunctionFragment;
    "currentAMOmintedFyFRAX()": FunctionFragment;
    "currentFrax()": FunctionFragment;
    "custodianAddress()": FunctionFragment;
    "decreaseRates(bytes6,uint128,uint128)": FunctionFragment;
    "dollarBalances()": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "fraxJoin()": FunctionFragment;
    "fraxValue(bytes6,uint256)": FunctionFragment;
    "increaseRates(bytes6,uint128,uint128)": FunctionFragment;
    "ladle()": FunctionFragment;
    "mintFyFrax(bytes6,uint128)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidityFromAMM(bytes6,uint256,uint256,uint256)": FunctionFragment;
    "removeSeries(bytes6,uint256)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
    "seriesIterator()": FunctionFragment;
    "setAMOMinter(address)": FunctionFragment;
    "setLadle(address)": FunctionFragment;
    "showAllocations(bytes6)": FunctionFragment;
    "timelockAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FRAX_ILK_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityToAMM",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSeries",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFyFrax",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentAMOmintedFRAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAMOmintedFyFRAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentFrax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "custodianAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseRates",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dollarBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fraxJoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fraxValue",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRates",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFyFrax",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityFromAMM",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeries",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "series", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "seriesIterator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAMOMinter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setLadle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "showAllocations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FRAX_ILK_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityToAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSeries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFyFrax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentAMOmintedFRAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAMOmintedFyFRAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "custodianAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dollarBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fraxJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fraxValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFyFrax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityFromAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seriesIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAMOMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLadle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockAddress",
    data: BytesLike
  ): Result;

  events: {
    "AMOMinterSet(address)": EventFragment;
    "LadleSet(address)": EventFragment;
    "LiquidityAdded(uint256,uint256)": EventFragment;
    "LiquidityRemoved(uint256,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "RatesDecreased(uint256,uint256)": EventFragment;
    "RatesIncreased(uint256,uint256)": EventFragment;
    "SeriesAdded(bytes6)": EventFragment;
    "SeriesRemoved(bytes6)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMOMinterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LadleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesRemoved"): EventFragment;
}

export type AMOMinterSetEvent = TypedEvent<
  [string],
  { amoMinterAddress: string }
>;

export type AMOMinterSetEventFilter = TypedEventFilter<AMOMinterSetEvent>;

export type LadleSetEvent = TypedEvent<[string], { ladleAddress: string }>;

export type LadleSetEventFilter = TypedEventFilter<LadleSetEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { fraxUsed: BigNumber; poolMinted: BigNumber }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { fraxReceived: BigNumber; poolBurned: BigNumber }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export type RatesDecreasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { fraxUsed: BigNumber; fraxReceived: BigNumber }
>;

export type RatesDecreasedEventFilter = TypedEventFilter<RatesDecreasedEvent>;

export type RatesIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { fraxUsed: BigNumber; fraxReceived: BigNumber }
>;

export type RatesIncreasedEventFilter = TypedEventFilter<RatesIncreasedEvent>;

export type SeriesAddedEvent = TypedEvent<[string], { seriesId: string }>;

export type SeriesAddedEventFilter = TypedEventFilter<SeriesAddedEvent>;

export type SeriesRemovedEvent = TypedEvent<[string], { seriesId: string }>;

export type SeriesRemovedEventFilter = TypedEventFilter<SeriesRemovedEvent>;

export interface AMO extends BaseContract {
  contractName: "AMO";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AMOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FRAX_ILK_ID(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityToAMM(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      fyFraxAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeries(
      seriesId: BytesLike,
      fyToken: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFyFrax(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    currentAMOmintedFRAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentAMOmintedFyFRAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentFrax(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraxAmount: BigNumber }>;

    custodianAddress(overrides?: CallOverrides): Promise<[string]>;

    decreaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFyFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dollarBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        valueAsFrax: BigNumber;
        valueAsCollateral: BigNumber;
      }
    >;

    execute(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fraxJoin(overrides?: CallOverrides): Promise<[string]>;

    fraxValue(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraxAmount: BigNumber }>;

    increaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    mintFyFrax(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidityFromAMM(
      seriesId: BytesLike,
      poolAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSeries(
      seriesId: BytesLike,
      seriesIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        vaultId: string;
        fyToken: string;
        pool: string;
        maturity: BigNumber;
      }
    >;

    seriesIterator(
      overrides?: CallOverrides
    ): Promise<[string[]] & { seriesIterator_: string[] }>;

    setAMOMinter(
      _amoMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLadle(
      _ladle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showAllocations(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  FRAX_ILK_ID(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityToAMM(
    seriesId: BytesLike,
    fraxAmount: BigNumberish,
    fyFraxAmount: BigNumberish,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeries(
    seriesId: BytesLike,
    fyToken: string,
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFyFrax(
    seriesId: BytesLike,
    fyFraxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  currentAMOmintedFRAX(overrides?: CallOverrides): Promise<BigNumber>;

  currentAMOmintedFyFRAX(overrides?: CallOverrides): Promise<BigNumber>;

  currentFrax(overrides?: CallOverrides): Promise<BigNumber>;

  custodianAddress(overrides?: CallOverrides): Promise<string>;

  decreaseRates(
    seriesId: BytesLike,
    fraxAmount: BigNumberish,
    minFyFraxReceived: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dollarBalances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      valueAsFrax: BigNumber;
      valueAsCollateral: BigNumber;
    }
  >;

  execute(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fraxJoin(overrides?: CallOverrides): Promise<string>;

  fraxValue(
    seriesId: BytesLike,
    fyFraxAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseRates(
    seriesId: BytesLike,
    fraxAmount: BigNumberish,
    minFraxReceived: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ladle(overrides?: CallOverrides): Promise<string>;

  mintFyFrax(
    seriesId: BytesLike,
    fraxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidityFromAMM(
    seriesId: BytesLike,
    poolAmount: BigNumberish,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSeries(
    seriesId: BytesLike,
    seriesIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      vaultId: string;
      fyToken: string;
      pool: string;
      maturity: BigNumber;
    }
  >;

  seriesIterator(overrides?: CallOverrides): Promise<string[]>;

  setAMOMinter(
    _amoMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLadle(
    _ladle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showAllocations(
    seriesId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FRAX_ILK_ID(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addLiquidityToAMM(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      fyFraxAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fraxUsed: BigNumber; poolMinted: BigNumber }
    >;

    addSeries(
      seriesId: BytesLike,
      fyToken: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFyFrax(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fraxAmount: BigNumber;
        fyFraxStored: BigNumber;
      }
    >;

    cauldron(overrides?: CallOverrides): Promise<string>;

    currentAMOmintedFRAX(overrides?: CallOverrides): Promise<BigNumber>;

    currentAMOmintedFyFRAX(overrides?: CallOverrides): Promise<BigNumber>;

    currentFrax(overrides?: CallOverrides): Promise<BigNumber>;

    custodianAddress(overrides?: CallOverrides): Promise<string>;

    decreaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFyFraxReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fraxReceived: BigNumber;
        fyFraxStored: BigNumber;
      }
    >;

    dollarBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        valueAsFrax: BigNumber;
        valueAsCollateral: BigNumber;
      }
    >;

    execute(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    fraxJoin(overrides?: CallOverrides): Promise<string>;

    fraxValue(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFraxReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<string>;

    mintFyFrax(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidityFromAMM(
      seriesId: BytesLike,
      poolAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fraxReceived: BigNumber;
        fyFraxStored: BigNumber;
      }
    >;

    removeSeries(
      seriesId: BytesLike,
      seriesIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        vaultId: string;
        fyToken: string;
        pool: string;
        maturity: BigNumber;
      }
    >;

    seriesIterator(overrides?: CallOverrides): Promise<string[]>;

    setAMOMinter(_amoMinter: string, overrides?: CallOverrides): Promise<void>;

    setLadle(_ladle: string, overrides?: CallOverrides): Promise<void>;

    showAllocations(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AMOMinterSet(address)"(amoMinterAddress?: null): AMOMinterSetEventFilter;
    AMOMinterSet(amoMinterAddress?: null): AMOMinterSetEventFilter;

    "LadleSet(address)"(ladleAddress?: null): LadleSetEventFilter;
    LadleSet(ladleAddress?: null): LadleSetEventFilter;

    "LiquidityAdded(uint256,uint256)"(
      fraxUsed?: null,
      poolMinted?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      fraxUsed?: null,
      poolMinted?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(uint256,uint256)"(
      fraxReceived?: null,
      poolBurned?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      fraxReceived?: null,
      poolBurned?: null
    ): LiquidityRemovedEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    "RatesDecreased(uint256,uint256)"(
      fraxUsed?: null,
      fraxReceived?: null
    ): RatesDecreasedEventFilter;
    RatesDecreased(
      fraxUsed?: null,
      fraxReceived?: null
    ): RatesDecreasedEventFilter;

    "RatesIncreased(uint256,uint256)"(
      fraxUsed?: null,
      fraxReceived?: null
    ): RatesIncreasedEventFilter;
    RatesIncreased(
      fraxUsed?: null,
      fraxReceived?: null
    ): RatesIncreasedEventFilter;

    "SeriesAdded(bytes6)"(seriesId?: null): SeriesAddedEventFilter;
    SeriesAdded(seriesId?: null): SeriesAddedEventFilter;

    "SeriesRemoved(bytes6)"(seriesId?: null): SeriesRemovedEventFilter;
    SeriesRemoved(seriesId?: null): SeriesRemovedEventFilter;
  };

  estimateGas: {
    FRAX_ILK_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityToAMM(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      fyFraxAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeries(
      seriesId: BytesLike,
      fyToken: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFyFrax(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    currentAMOmintedFRAX(overrides?: CallOverrides): Promise<BigNumber>;

    currentAMOmintedFyFRAX(overrides?: CallOverrides): Promise<BigNumber>;

    currentFrax(overrides?: CallOverrides): Promise<BigNumber>;

    custodianAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFyFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dollarBalances(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fraxJoin(overrides?: CallOverrides): Promise<BigNumber>;

    fraxValue(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    mintFyFrax(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityFromAMM(
      seriesId: BytesLike,
      poolAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSeries(
      seriesId: BytesLike,
      seriesIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    seriesIterator(overrides?: CallOverrides): Promise<BigNumber>;

    setAMOMinter(
      _amoMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLadle(
      _ladle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showAllocations(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FRAX_ILK_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityToAMM(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      fyFraxAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeries(
      seriesId: BytesLike,
      fyToken: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFyFrax(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentAMOmintedFRAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentAMOmintedFyFRAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentFrax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    custodianAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFyFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dollarBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fraxJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fraxValue(
      seriesId: BytesLike,
      fyFraxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseRates(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      minFraxReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFyFrax(
      seriesId: BytesLike,
      fraxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidityFromAMM(
      seriesId: BytesLike,
      poolAmount: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSeries(
      seriesId: BytesLike,
      seriesIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seriesIterator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAMOMinter(
      _amoMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLadle(
      _ladle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showAllocations(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
